{"version":3,"sources":["UserTable.js","App.js","serviceWorker.js","index.js"],"names":["UserTable","props","saveBtn","className","width","height","viewBox","fill","xmlns","fillRule","d","deleteBtn","useState","userEdit","setUserEdit","onUserEditChange","e","name","target","value","saveUser","editCancel","hidden","isTableHidden","scope","users","map","el","key","id","type","onChange","onClick","username","email","address","street","suite","city","zipcode","phone","website","company","App","setUsers","setisTableHidden","href","axios","method","url","then","response","data","user","savedUserList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b34d9984.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\n\nfunction UserTable(props) {\n\n    const saveBtn = (\n        <svg className=\"bi bi-check2-all\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n             xmlns=\"http://www.w3.org/2000/svg\">\n            <path fillRule=\"evenodd\"\n                  d=\"M12.354 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z\"/>\n            <path\n                d=\"M6.25 8.043l-.896-.897a.5.5 0 1 0-.708.708l.897.896.707-.707zm1 2.414l.896.897a.5.5 0 0 0 .708 0l7-7a.5.5 0 0 0-.708-.708L8.5 10.293l-.543-.543-.707.707z\"/>\n        </svg>\n    );\n\n    const deleteBtn = (<svg className=\"bi bi-x\" width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" fill=\"currentColor\"\n                            xmlns=\"http://www.w3.org/2000/svg\">\n        <path fillRule=\"evenodd\" d=\"M11.854 4.146a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708-.708l7-7a.5.5 0 0 1 .708 0z\"/>\n        <path fillRule=\"evenodd\" d=\"M4.146 4.146a.5.5 0 0 0 0 .708l7 7a.5.5 0 0 0 .708-.708l-7-7a.5.5 0 0 0-.708 0z\"/>\n    </svg>);\n\n    const [userEdit, setUserEdit] = useState([]);\n\n    const editer = (user) => {\n        setUserEdit(user);\n    }\n\n    const onUserEditChange = (e) => {\n        setUserEdit({...userEdit, name: e.target.value})\n    }\n\n    const saveUser = () => {\n        props.saveUser(userEdit);\n        setUserEdit([]);\n    }\n\n    const editCancel = () => {\n        setUserEdit([]);\n    }\n\n    return (\n        <div className=\"UserTable\">\n\n            <table className=\"table\" hidden={props.isTableHidden}>\n                <thead>\n                <tr>\n                    <th scope=\"col\">id</th>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Username</th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">Address</th>\n                    <th scope=\"col\">Phone</th>\n                    <th scope=\"col\">Website</th>\n                    <th scope=\"col\">Company</th>\n                </tr>\n                </thead>\n                {props.users.map(el =>\n                    <tbody key={el.id}>\n                    <tr>\n                        <th scope=\"row\">{el.id}</th>\n\n                        {\n                            userEdit.id === el.id\n                                ? <>\n                                    <input type=\"text\" value={userEdit.name} onChange={onUserEditChange}/>\n                                    <button className=\"btn btn-outline-success btn-sm\" onClick={saveUser}>{saveBtn}</button>\n                                    <button className=\"btn btn-outline-danger btn-sm\"\n                                            onClick={editCancel}>{deleteBtn}</button>\n                                </>\n                                : <td onClick={() => editer(el)}>{el.name}</td>\n\n                        }\n                        <td>{el.username}</td>\n                        <td>{el.email}</td>\n                        <td>\n                            <tr>{el.address.street}</tr>\n                            <tr>{el.address.suite}</tr>\n                            <tr>{el.address.city}</tr>\n                            <tr>{el.address.zipcode}</tr>\n                        </td>\n                        <td>{el.phone}</td>\n                        <td>{el.website}</td>\n                        <td>{el.company.name}</td>\n                    </tr>\n                    </tbody>\n                )}\n            </table>\n        </div>\n    )\n}\n\nexport default UserTable;\n","import React, {useState} from 'react';\nimport axios from 'axios';\nimport UserTable from './UserTable';\n\nfunction App() {\n\n    const [users, setUsers] = useState([]);\n    const [isTableHidden, setisTableHidden] = useState(true)\n\n    const load = () => {\n        axios({\n            method: 'get',\n            url: 'https://jsonplaceholder.typicode.com/users'\n        })\n            .then((response) => {\n                setUsers(response.data);\n            });\n        setisTableHidden(false);\n    }\n\n    const saveUser = (user) => {\n        const savedUserList = users.map(el => {\n            if (user.id === el.id) return {...el, name: user.name}\n            else return el;\n        })\n        setUsers(savedUserList);\n    }\n\n    return (\n        <div className=\"App\">\n\n            <div className=\"container\">\n                <p/>\n                <a href=\"https://github.com/olgabresheva/reactasync\">Link to GitHub</a>\n                <p/>\n                <button type=\"button\" className=\"btn btn-info\" onClick={load}>Review Users</button>\n                <p/>\n                <UserTable users={users}\n                           isTableHidden={isTableHidden}\n                           saveUser={saveUser}/>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}